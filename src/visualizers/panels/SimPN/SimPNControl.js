/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Aug 02 2022 14:04:10 GMT-0500 (Central Daylight Time).
 */

 define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function SimPNControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._networkRootLoaded = false;

        this._fireableEvents = null;

        this._initWidgetEventHandlers();

        // we need to fix the context of this function as it will be called from the widget directly
        this.setFireableEvents = this.setFireableEvents.bind(this);

        this._logger.debug('ctor finished');
    }

    SimPNControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    SimPNControl.prototype.selectedObjectChanged = function (nodeId) {
        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            self._selfPatterns[nodeId] = {children: 1};
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    SimPNControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                childrenIds: node.getChildrenIds(),
                parentId: node.getParentId(),
                isConnection: GMEConcepts.isConnection(nodeId)
            };
        }

        return objDescriptor;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    SimPNControl.prototype._eventCallback = function (events) {
        const self = this;
        console.log(events);
        events.forEach(event => {
            if (event.eid && 
                event.eid === self._currentNodeId ) {
                    if (event.etype == 'load' || event.etype == 'update') {
                        self._networkRootLoaded = true;
                    } else {
                        self.clearSM();
                        return;
                    }
                }
                
        });

        if (events.length && events[0].etype === 'complete' && self._networkRootLoaded) {
            // complete means we got all requested data and we do not have to wait for additional load cycles
            self._initSM();
        }
    };

    SimPNControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Machine manipulation functions * * * * * * * */
    SimPNControl.prototype._initSM = function () {
        console.log("starting initSM")
        const self = this;
        //just for the ease of use, lets create a META dictionary
        const rawMETA = self._client.getAllMetaNodes();
        const META = {};
        rawMETA.forEach(node => {
            META[node.getAttribute('name')] = node.getId(); //we just need the id...
        });

        //now we collect all data we need for network visualization
        //we need our states (names, position, type), need the set of next state (with event names)
        const smNode = self._client.getNode(self._currentNodeId);
        const elementIds = smNode.getChildrenIds();

        const path2node = {}
        elementIds.forEach(eid => {
            path2node[eid] = self._client.getNode(eid)
        })

        const sm = {init: null, states:{}};
        elementIds.forEach(elementId => {
            const node = self._client.getNode(elementId); 
            // the simple way of checking type
            if (node.isTypeOf(META['Place']) || node.isTypeOf(META['Transition'])) {
                //right now we only interested in states...
                const state = {
                    name: node.getAttribute('name'),
                    meta_type: node.isTypeOf(META['Place']) ? "Place" : "Transition",
                    tokens: node.isTypeOf(META['Place']) ? node.getAttribute('tokens') : null,
                    paths_to: [],
                    paths_from: [],
                    position: node.getRegistry('position')
                };

                // one way to check meta-type in the client context - though it does not check for generalization types like State
                // if ('Init' === self._client.getNode(node.getMetaTypeId()).getAttribute('name')) {
                //     sm.init = elementId;
                // }

                // this is in no way optimal, but shows clearly what we are looking for when we collect the data
                elementIds.forEach(eid2 => {
                    const arc = self._client.getNode(eid2);
                    if (arc.isTypeOf(META['Arc'])) {
                        const src_id = arc.getPointerId('src') 
                        const src_node = self._client.getNode(src_id)
                        const src_parentId = src_node.getParentId()

                        const dst_id = arc.getPointerId('dst') 
                        const dst_node = self._client.getNode(dst_id)
                        const dst_parentId = dst_node.getParentId()
                    
                        if(src_parentId === elementId) {
                            //state.next[arc.getAttribute('event')] = arc.getPointerId('dst');
                            state.paths_to.push({
                                id: dst_parentId,
                                name: self._client.getNode(dst_parentId).getAttribute('name'),
                                okens: self._client.getNode(dst_parentId).isTypeOf(META['Place']) ? self._client.getNode(dst_parentId).getAttribute('tokens') : null,
                                meta_type: self._client.getNode(dst_parentId).isTypeOf(META['Place']) ? "Place" : "Transition"
                            })
                        } else if (dst_parentId == elementId) {
                            state.paths_from.push({
                                id: src_parentId,
                                name: self._client.getNode(src_parentId).getAttribute('name'),
                                tokens: self._client.getNode(src_parentId).isTypeOf(META['Place']) ? self._client.getNode(src_parentId).getAttribute('tokens') : null,
                                meta_type: self._client.getNode(src_parentId).isTypeOf(META['Place']) ? "Place" : "Transition"
                            })
                        }
                    }
                });
                sm.states[elementId] = state;
            }
        });
        //sm.setFireableEvents = this.setFireableEvents;

        self._widget.initMachine(sm);
    };

    SimPNControl.prototype.clearSM = function () {
        const self = this;
        self._networkRootLoaded = false;
        //self._widget.destroyMachine();
    };

    SimPNControl.prototype.setFireableEvents = function (events) {
        // this._fireableEvents = events;
        // if (events && events.length > 1) {
        //     // we need to fill the dropdow button with options
        //     this.$btnEventSelector.clear();
        //     events.forEach(event => {
        //         this.$btnEventSelector.addButton({
        //             text: event,
        //             title: 'fire event: '+ event,
        //             data: {event: event},
        //             clickFn: data => {
        //                 this._widget.fireEvent(data.event);
        //             }
        //         });
        //     });
        // } else if (events && events.length === 0) {
        //     this._fireableEvents = null;
        // }

        // this._displayToolbarItems();
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimPNControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    SimPNControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    SimPNControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    SimPNControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    SimPNControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    SimPNControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    SimPNControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    SimPNControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    SimPNControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Button to run classifications check ****************/
        this.$btnClassificationsCheck = toolBar.addButton({
            title: 'Check Petri Net classifications',
            icon: 'glyphicon glyphicon-question-sign',
            clickFn: function (/*data*/) {
                const context = self._client.getCurrentPluginContext('ClassificationsCheck',self._currentNodeId, []);
                // !!! it is important to fill out or pass an empty object as the plugin config otherwise we might get errors...
                context.pluginConfig = {};
                self._client.runServerPlugin(
                    'ClassificationsCheck', 
                    context, 
                    function(err, result){
                        // here comes any additional processing of results or potential errors.
                        console.log('plugin err:', err);
                        console.log('plugin result:', result);
                });
            }
        });
        this._toolbarItems.push(this.$btnClassificationsCheck);
        
        /************** Reset Button *******************/

        this.$btnResetSim = toolBar.addButton({
            title: 'Reset simulator',
            icon: 'glyphicon glyphicon-fast-backward',
            clickFn: function (/*data*/) {
                self._widget.resetPetriNet();
            }
        });
        this._toolbarItems.push(this.$btnResetSim);

        /************** Play Button *******************/

        // if there is only one event we just show a play button
        this.$btnSingleEvent = toolBar.addButton({
            title: 'Fire event',
            icon: 'glyphicon glyphicon-play',
            clickFn: function (/*data*/) {
                self._widget.fireEvent(self._fireableEvents[0]);
            }
        });
        this._toolbarItems.push(this.$btnSingleEvent);

        this._toolbarInitialized = true;
    };

    return SimPNControl;
});
